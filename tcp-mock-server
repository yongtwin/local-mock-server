import socket
import threading
import time

clients = []

def handle_client(client_socket):
    with client_socket:
        client_address = client_socket.getpeername()
        print(f"Connection from {client_address}")
        clients.append(client_socket)
        try:
            while True:
                # Receive data from the client
                data = client_socket.recv(1024)
                if not data:
                    print(f"Client {client_address} disconnected")
                    break
                print(f"Received from {client_address}: {data.decode('utf-8')}")

                # Send a message to the client
                message = b'Hello, client'
                client_socket.sendall(message)
                print(f"Sent to {client_address}: {message.decode('utf-8')}")

                time.sleep(5)  # Send a message every 5 seconds
        except socket.error as e:
            print(f"Socket error: {e}")
        finally:
            clients.remove(client_socket)
            print(f"Connection closed: {client_address}")

def start_server(host, port):
    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server.bind((host, port))
    server.listen(5)
    print(f"[*] Listening on {host}:{port}")

    try:
        while True:
            client_socket, addr = server.accept()
            print(f"Accepted connection from {addr}")
            client_handler = threading.Thread(target=handle_client, args=(client_socket,))
            client_handler.daemon = True  # Ensure threads are daemon threads
            client_handler.start()
    except KeyboardInterrupt:
        print("\n[*] Shutting down server")
    finally:
        server.close()
        for client in clients:
            client.close()

if __name__ == "__main__":
    HOST = '127.0.0.1'  # Localhost
    PORT = 9999         # Arbitrary non-privileged port
    start_server(HOST, PORT)
